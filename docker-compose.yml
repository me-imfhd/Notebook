version: "3.8"

services:
  db:
    image: postgres:latest
    ports:
      - 5432:5432
    restart: always
    environment:
      POSTGRES_USER: dev
      POSTGRES_PASSWORD: dev
      POSTGRES_DB: notebook
    volumes:
      - db:/var/lib/postgresql/data

  web:
    env_file: .env
    container_name: web
    build:
      context: .
      dockerfile: ./apps/web/Dockerfile
    restart: always
    expose:
      - 3000
    ports:
      - 3000:3000

  backend:
    build: ./apps/web/Dockerfile
    environment:
      - API_KEY=$API_KEY
      - EMBEDDINGS_KEY=$API_KEY
      - LLM_NAME=$LLM_NAME
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - MONGO_URI=mongodb://mongo:27017/docsgpt
    ports:
      - "7091:7091"
    volumes:
      - ./application/indexes:/app/application/indexes
      - ./application/inputs:/app/application/inputs
      - ./application/vectors:/app/application/vectors
    depends_on:
      - redis
      - mongo

  worker:
  build: ./apps/web/Dockerfile
  command: celery -A application.app.celery worker -l INFO
  environment:
    - API_KEY=$API_KEY
    - EMBEDDINGS_KEY=$API_KEY
    - LLM_NAME=$LLM_NAME
    - CELERY_BROKER_URL=redis://redis:6379/0
    - CELERY_RESULT_BACKEND=redis://redis:6379/1
    - MONGO_URI=mongodb://mongo:27017/docsgpt
    - API_URL=http://backend:7091
  depends_on:
    - redis
    - mongo

  redis:
  image: redis:6-alpine
  ports:
    - 6379:6379

  mongo:
    image: mongo:6
    ports:
      - 27017:27017
    volumes:
      - mongodb_data_container:/data/db

# Define a network, which allows containers to communicate
# with each other, by using their container name as a hostname
volumes:
  mongodb_data_container:
  db:
    driver: local
